#region using
	using Convert = System.Convert;
	using Network;
	using Newtonsoft.Json;
	using System;
	using System.Collections.Generic;
	using System.Collections;
	using System.Linq;
	using System.Text;
	using Oxide.Core.Libraries.Covalence;
	using Oxide.Plugins;
	using Oxide.Core.Plugins;
	using Oxide.Core;
	using UnityEngine; 
	using UnityEngine.SceneManagement;
	using UnityEngine.AI;
	using Rust.Ai;
	using Oxide.Ext.RustEdit;
#endregion
namespace Oxide.Plugins{
	[Info("Hotzone", "obsol", "0.0.1")]
	[Description("Makes all scientist brains move towards a specified point on the map")]
	
	public class Hotzone : CovalencePlugin{	
		#region Generic Vars
			private Game.Rust.Libraries.Player _rustPlayer = Interface.Oxide.GetLibrary<Game.Rust.Libraries.Player>("Player");
			private void SendChatMsg(BasePlayer pl, string msg) =>
			_rustPlayer.Message(pl, msg,  "<color=#00ff00>[Hotzone]</color>", 0, Array.Empty<object>());
			private ulong followID = 0;
			private Vector3 scanpoint;
			private Dictionary<string,AIInformationZone> ActiveAIZ = new Dictionary<string,AIInformationZone>();
		#endregion24.203.64.3:51972/76561198004703684/Wasteland Bard has auth level 2
		#region Configuration
		private Configuration config;
		private void Init(){
			permission.RegisterPermission("hotzone.set", this);
		}		
		class Configuration{
			[JsonProperty("target", ObjectCreationHandling = ObjectCreationHandling.Replace)]
			public Vector3 target;
			[JsonProperty("factionLib", ObjectCreationHandling = ObjectCreationHandling.Replace)]
			public Dictionary<ulong, Dictionary<FactionController.FactionType,float>> factionLib=new Dictionary<ulong, Dictionary<FactionController.FactionType,float>>();
			[JsonProperty("pointGroups", ObjectCreationHandling = ObjectCreationHandling.Replace)]		
			public Dictionary<string,List<Vector3>> pointGroups = new Dictionary<string,List<Vector3>>();
			public string ToJson() => JsonConvert.SerializeObject(this);				
			public Dictionary<string, object> ToDictionary() => JsonConvert.DeserializeObject<Dictionary<string, object>>(ToJson());
		}
		protected override void LoadDefaultConfig() => config = new Configuration();
		protected override void LoadConfig(){
			base.LoadConfig();
			try{
				config = Config.ReadObject<Configuration>();
				if (config == null) throw new JsonException();
				if (!config.ToDictionary().Keys.SequenceEqual(Config.ToDictionary(x => x.Key, x => x.Value).Keys)){
					LogWarning("Configuration appears to be outdated; updating and saving");SaveConfig();}
			}
			catch{LogWarning($"Configuration file {Name}.json is invalid; using defaults");LoadDefaultConfig();}
			FactionController.factionScores = config.factionLib;
			initAIZ();
		}
		protected override void SaveConfig(){
			LogWarning($"Configuration changes saved to {Name}.json");
			config.factionLib=FactionController.factionScores;
			Config.WriteObject(config, true);
		}
		#endregion Configuration
		#region Faction logic		
			#region Utility
			public BaseEntity getLookingAt(BasePlayer player){			
				RaycastHit hit;
				if (Physics.Raycast(player.eyes.HeadRay(), out hit)){
					var entity = hit.GetEntity();
					if (entity != null){if(entity.GetComponent<BaseEntity>()!=null) return entity.GetComponent<BaseEntity>();}
				}
				return null;
			}
			#endregion
			#region Chat commands
			[Command("hz_set")] private void surv_hotzone(IPlayer player, string command, string[] args){
				BasePlayer bp = (BasePlayer)player.Object;
				if(player.HasPermission("hotzone.set")){
					config.target=bp.transform.position;				
					SendChatMsg(bp,"Target set!" + config.target.ToString());
				}
				else SendChatMsg(bp,"Missing permission!");
			
			}
			[Command("hz_add")] private void surv_aizadd(IPlayer player, string command, string[] args){	
				BasePlayer bp = (BasePlayer)player.Object;
				if(args.Count()==0){
					SendChatMsg(bp, "<color=#FF0000>[Add Movepoint to what path?]</color>");
					return;
				}
				if(!config.pointGroups.ContainsKey(args[0]))config.pointGroups.Add(args[0],new List<Vector3>());
				if(config.pointGroups[args[0]]==null) config.pointGroups[args[0]] = new List<Vector3>();
				config.pointGroups[args[0]].Add(bp.transform.position);
				SendChatMsg(bp, "<color=#FF0000>[Movepoint Added]</color>");
				
			}
			[Command("hz_switch")] private void surv_aizend(IPlayer player, string command, string[] args){
				BasePlayer bp = (BasePlayer)player.Object;
				if(args.Count()<2){
					SendChatMsg(bp, "<color=#FF0000>[What path to follow?]</color>");
					return;
				}
				SendChatMsg(bp, "<color=#FF0000>[AIZ Set]</color>");
				AIInformationZone aiz = ActiveAIZ[args[0]];
				int i = 0;
				int j = 0;
				foreach(FactionController fc in GameObject.FindObjectsOfType<FactionController>()){
					HumanNPC hn = fc.gameObject.GetComponent<HumanNPC>();
					if(!(hn==null || fc.faction.ToString()!=args[1])){						
						hn.VirtualInfoZone = aiz;
						hn.Brain.Navigator.Path = hn.VirtualInfoZone.paths[0];
						if(hn.Brain.CurrentState is BaseAIBrain<HumanNPC>.BaseFollowPathState){
							//hn.Brain.CurrentState.StateEnter();
							((BaseAIBrain<HumanNPC>.BaseFollowPathState)hn.Brain.CurrentState).path = hn.Brain.Navigator.Path;
							((BaseAIBrain<HumanNPC>.BaseFollowPathState)hn.Brain.CurrentState).currentNodeIndex=UnityEngine.Random.Range(0,5);
						}
						i++;						
					}else{j++;}
				}
				SendChatMsg(bp, "<color=#FF0000>[AIZ Applied]"+i+":"+j+"</color>");
			}
			[Command("hz_get")] private void surv_info(IPlayer player, string command, string[] args){				
				BasePlayer bp = (BasePlayer)player.Object;
				SendChatMsg(bp,"Current oceanlevel:" + ConVar.Env.oceanlevel.ToString());
				FactionController fc = bp.GetComponent<FactionController>();
				SendChatMsg(bp,"Current Position:" + bp.transform.position.ToString());
				SendChatMsg(bp,"Current Target:" + config.target.ToString());
				SendChatMsg(bp,"Current Distance:" + Vector3.Distance(config.target,bp.transform.position).ToString());
				if(fc==null) return;
				SendChatMsg(bp,"Current Faction:"+bp.GetComponent<FactionController>().faction.ToString());
				foreach(KeyValuePair<FactionController.FactionType,float> ff in FactionController.factionScores[bp.userID]){
					SendChatMsg(bp,ff.Key.ToString() + ":" + ff.Value.ToString());
				}	
				
				//
			}
			[Command("hz_scan")] private void surv_scan(IPlayer player, string command, string[] args){				
				BasePlayer bp = (BasePlayer)player.Object;	
				
				bool first = true;
				/*
				foreach(BaseCombatEntity fc in GameObject.FindObjectsOfType<BaseCombatEntity>()){
					if(Vector3.Distance(fc.gameObject.transform.position,bp.transform.position) < 10){
						BaseAIBrain<HumanNPC> brain = fc.GetComponent<BaseAIBrain<HumanNPC>>();
						if(brain==null){fc.GetComponent<ScientistBrain>();}
						if(brain==null) continue;
						SendChatMsg(bp, "<color=#FF0000>["+fc.faction.ToString()+"]</color>");
					SendChatMsg(bp, "<color=#00FFFF>["+brain.CurrentState.ToString()+"] ");
					SendChatMsg(bp,brain.Navigator.StoppingDistance.ToString());
					SendChatMsg(bp,brain.Navigator.Path.transform.parent.name.ToString());
					SendChatMsg(bp,brain.Navigator.Destination.ToString()+"</color>");
					}
				}
				*/
				
				try{
					BaseCombatEntity fc = (BaseCombatEntity)getLookingAt(bp);
					if(Vector3.Distance(fc.gameObject.transform.position,bp.transform.position) < 10){
						SendChatMsg(bp, "<color=#FF0000>["+fc.faction.ToString()+":"+fc.name+"]</color>");
						BaseAIBrain<HumanNPC> brain = fc.GetComponent<BaseAIBrain<HumanNPC>>();
						if(brain==null){fc.GetComponent<BaseAIBrain<HumanNPC>>();}
						if(brain==null) return;
						SendChatMsg(bp, "<color=#00FFFF>["+brain.CurrentState.ToString()+"] ");
						SendChatMsg(bp,brain.Navigator.StoppingDistance.ToString());
						SendChatMsg(bp,brain.Navigator.Path.transform.parent.name.ToString());
						SendChatMsg(bp,brain.Navigator.Destination.ToString()+"</color>");
					}
				}catch(Exception e){
				}
			}
			[Command("hz_follow")] private void surv_follow(IPlayer player, string command, string[] args){				
				ulong.TryParse(args[0], out followID);
			}
			[Command("hz_save")] private void surv_save(IPlayer player, string command, string[] args){		
				BasePlayer bp = (BasePlayer)player.Object;
				SaveConfig();
				SendChatMsg(bp,"Saving!");
								
			}
			[Command("hz_load")] private void surv_load(IPlayer player, string command, string[] args){		
				BasePlayer bp = (BasePlayer)player.Object;
				LoadConfig();
				SendChatMsg(bp,"Saving!");
								
			}
			[Command("hz_reset")] private void surv_reset(IPlayer player, string command, string[] args){	
				initAIZ();
				BasePlayer bp = (BasePlayer)player.Object;
				int i = 0;
				int j = 0;
				foreach(BasePlayer hn in GameObject.FindObjectsOfType<BasePlayer>()){
					if(hn.GetComponent<FactionController>()!=null){
						GameObject.Destroy(hn.GetComponent<FactionController>());
					}
					if(swapSciRoamState((hn))) i++;	
					else j++;
				}					
				SendChatMsg(bp, "<color=#FF0000>[Reset! "+i+":"+j+"]</color>");
			}
			public void addPointToGroup(){}
			#endregion chatcmds
			//Oxide.Ext.RustEdit.NPC.NPCSpawner
			
			/*
				find faction state > find path name+factionstate > pick one at random
				Can bandits be switched to combat state?
				on timer, roll state chances, switch to state
				on set destination, check faction state and switch path as necessary
				on entity damage, index - 2 - lazy delay/retreats
				change add command - sets tracked player and switches boolean, creates a point every 10 seconds in point group
				seperate AIZ creation from point creation, use load to generate AIZs, add command to destroy them.
			*/
			#region Faction Initializers
				
			void OnPlayerRespawned(BasePlayer player)=>initPlayer(player);
			void OnPlayerSleepEnded(BasePlayer player)=>initPlayer(player);
			void OnPlayerDisconnected(BasePlayer player, string reason)=>SaveConfig();
			object OnNPCAIInitialized(BaseAIBrain<HumanNPC> player){swapSciRoamState(player.GetComponent<HumanNPC>()); return null;}
			object OnPlayerDeath(BasePlayer player, HitInfo info){SaveConfig(); return null;}
			private bool swapSciRoamState(BasePlayer s){
				if(s.transform.name.ToLower().Contains("underwater")) return false;
				if(s.transform.name.ToLower().Contains("dweller")) return false;
				if(s.IsNpc)Puts(((char)27)+"[96m"+"IsNpc! Did you fix NPCPlayer with dnSpy?");
				//Puts(s.spawnPos.ToString());
				
				FactionController fc = null;
				if(s.transform.name.ToLower().Contains("scientist")) { 
					fc = s.gameObject.AddComponent<FactionController>();
					fc.faction=FactionController.FactionType.Scientist;
					s.faction = BaseCombatEntity.Faction.Scientist;
				}
				if(s.transform.name.ToLower().Contains("bandit")) {
					fc = s.gameObject.AddComponent<FactionController>();
					fc.faction=FactionController.FactionType.Bandit;
					s.faction = BaseCombatEntity.Faction.Bandit;
				}
				try{
					HumanNPC hn = ((HumanNPC)s);
					fc.self=hn;
					if(hn.Brain==null) return false;
					hn.Brain.Senses.senseTypes = (EntityType)67;
					hn.Brain.Senses.hostileTargetsOnly = false;
					hn.Brain.Senses.checkVision=false;
					hn.Brain.Senses.checkLOS=true;
					hn.Brain.Senses.maxRange=15f;
					
					
					if(!hn.Brain.Navigator.PlaceOnNavMesh())return true;		
					hn.Brain.Navigator.StoppingDistance=5f;
					((IAISleepable)hn.Brain).WakeAI();
				}catch(Exception e){}
					return true;////
			}																										
			void initPlayer(BasePlayer player){
				if(player.IsConnected){
					player.faction=BaseCombatEntity.Faction.Default;
				FactionController fc = player.gameObject.AddComponent<FactionController>();
				FactionController.changeScore(player, FactionController.FactionType.Both, 0.005f);
				FactionController.changeScore(player, FactionController.FactionType.Scientist, 0f);
				FactionController.changeScore(player, FactionController.FactionType.Bandit, 0f);
				SaveConfig();
				}
			}
			#endregion initializers
			#region Faction NPC Handlers
			object OnBasePlayerAttacked(BasePlayer victimbp, HitInfo info){
				Puts("OnBasePlayerAttacked");
				if(victimbp==null)return null;	
				//Puts("Shooter is NPC");		
				var result =((BaseCombatEntity)victimbp).faction==((BaseCombatEntity)info.Initiator).faction;
				Puts(result.ToString());
				if(result==true) return victimbp;
				//Puts("Same Team");
				return null;
			}
			/*
				object obj = Interface.CallHook("CanEntityBeHostile", this)
			*/
			object OnBuildingPrivilege(BaseEntity be, OBB obb){
				return null;
			}
			object OnAreaCheck(Construction.Placement place){
				Puts("privtest");
				return true;
			}
			object CanEntityBeHostile(BasePlayer entity){
				if(entity.IsConnected==false){
					return entity.unHostileTime> UnityEngine.Time.realtimeSinceStartup;
				}
				return null;
			}
			object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info){
				if(info.HitEntity==null||info.Initiator==null) return null;
				if(info.HitEntity.gameObject==null||info.Initiator.gameObject==null) return null;
				bool? returnvar = null;
				
				try{
					returnvar = ((BaseCombatEntity)info.Initiator).faction==((BaseCombatEntity)info.HitEntity).faction;	
					if(returnvar==false){
						((IAIAttack)info.HitEntity).StartAttacking((BaseCombatEntity)info.Initiator);
					}
					float switcher = UnityEngine.Random.Range(0.0f,1.0f);
					((HumanNPC)info.HitEntity).Brain.Navigator.Resume();
						if(switcher < 0.4f){
							((HumanNPC)info.HitEntity).Brain.Navigator.SetDestination(info.HitEntity.transform.position+new Vector3(UnityEngine.Random.Range(-5.0f,5.0f),0,UnityEngine.Random.Range(-5.0f,5.0f)), global::BaseNavigator.NavigationSpeed.Fast, 0f, 0f);
							((HumanNPC)info.HitEntity).SetDucked(false);
							}
						else if(switcher < 0.7f){
							((HumanNPC)info.HitEntity).Brain.Navigator.SetDestination(info.HitEntity.transform.position, global::BaseNavigator.NavigationSpeed.Normal, 0f, 0f);
							((HumanNPC)info.HitEntity).SetDucked(true);
						}else{
							((HumanNPC)info.HitEntity).SetDucked(false);
						}

				}catch(Exception e){}
				
				try{
					BasePlayer bp = (BasePlayer)info.Initiator;	
					if(bp.IsConnected){							
						if( UnityEngine.Random.Range(0.0f,1.0f) > 0.6f){
							switch(((BaseCombatEntity)info.HitEntity).faction){
								case BaseCombatEntity.Faction.Bandit:
									bp.faction =BaseCombatEntity.Faction.Bandit;		
									Puts(bp.ToString() +" Is now a scientist!");
									break;
									
								case BaseCombatEntity.Faction.Scientist:
									bp.faction =BaseCombatEntity.Faction.Scientist;		
									Puts(bp.ToString() +" Is now a Bandit!");						
									break;
								
							}
						}
					}else{
					}
				}catch(Exception e){}
						
				try{
					float b = UnityEngine.Time.realtimeSinceStartup + 60f;
					((BaseCombatEntity)info.Initiator).unHostileTime = Math.Max(((BaseCombatEntity)info.Initiator).unHostileTime , b);
				
				}catch(Exception e){}
				if(returnvar==null || returnvar == true ){
					return false;
				}else{
					return null;
				}
			}
			//*
			StateStatus? OnFollowThink(BaseAIBrain<HumanNPC>.BaseFollowPathState state,float delta){
					if(state.path == null){
						return global::StateStatus.Error;}
					if(state.currentTargetPoint == null){
						return global::StateStatus.Error;}
					if(state.path.Points == null){
						return global::StateStatus.Error;}
				if (state.currentWaitTime <= 0f && state.currentTargetPoint.HasLookAtPoints())
				{
					Transform randomLookAtPoint = state.currentTargetPoint.GetRandomLookAtPoint();
					if (randomLookAtPoint != null)
					{
						state.brain.Navigator.SetFacingDirectionOverride(Vector3Ex.Direction2D(randomLookAtPoint.transform.position, state.GetEntity().ServerPosition));
					}
				}
				if (state.currentTargetPoint.WaitTime > 0f)
				{
					state.currentWaitTime += delta;
				}
				if (state.currentTargetPoint.WaitTime <= 0f || state.currentWaitTime >= state.currentTargetPoint.WaitTime)
				{
					state.brain.Navigator.ClearFacingDirectionOverride();
					state.currentWaitTime = 0f;
					int num = state.currentNodeIndex;
					int useCount = 0;
					
					/*
					AIMovePoint testPoint;
					for(int i = 0; i < 6; i++){
					testPoint = state.path.GetPointAtIndex((((state.path.Points.Count()*6)+state.currentNodeIndex + (i  * (state.pathDirection == AIMovePointPath.PathDirection.Forwards? 1 : -1)))%state.path.Points.Count()));
						if(testPoint.InUse()) useCount++;
					}
					if(useCount>4){
						state.currentTargetPoint.SetUsedBy((BaseEntity)state.brain.OwningPlayer,10f);
						state.currentNodeIndex=num;
						return global::StateStatus.Running;
					}
						
					state.currentTargetPoint.ClearUsed();
					if(state.pathDirection != AIMovePointPath.PathDirection.Forwards){
						for(int i =3;(i>=0);i--){
							state.currentTargetPoint = state.path.GetPointAtIndex((num+i)%state.path.Points.Count())	;
							if(state.currentTargetPoint!=null){
								if(state.currentTargetPoint.InUse()){
									state.currentTargetPoint=null;
								}
							}																																																																							
						}
					}else{
						for(int i =-3;(i<=0);i++){
							int num2=num+state.path.Points.Count();
							state.currentTargetPoint = state.path.GetPointAtIndex((num2+i)%state.path.Points.Count());	
							if(state.currentTargetPoint!=null){
								if(state.currentTargetPoint.InUse()){
									state.currentTargetPoint=null;
								}
							}
						}						
					}
					if(state.currentTargetPoint==null){ 
						state.pathDirection = (UnityEngine.Random.Range(0.0f,1.0f)>0.5?AIMovePointPath.PathDirection.Forwards:AIMovePointPath.PathDirection.Backwards);
						state.currentNodeIndex = num;
						state.currentTargetPoint = state.path.GetPointAtIndex(state.currentNodeIndex);	
						return global::StateStatus.Running;
					}
					if(state.currentTargetPoint.InUse()) return global::StateStatus.Running;
					//state.currentTargetPoint.SetUsedBy((BaseEntity)state.brain.OwningPlayer,10f);
					
					
					*///
					bool destRes = false;
					state.currentNodeIndex=(((state.path.Points.Count()*6)+state.currentNodeIndex + (UnityEngine.Random.Range(0,3)  * (state.pathDirection == AIMovePointPath.PathDirection.Forwards? 1 : -1)))%state.path.Points.Count());
					state.currentTargetPoint=state.path.GetPointAtIndex(state.currentNodeIndex);
					
					float dist = UnityEngine.Random.Range(2f,5f);
					float angle = UnityEngine.Random.Range(1f,Mathf.Pow(2f,dist))*(360f/Mathf.Pow(2f,dist));
					
					float x = dist * Mathf.Cos(angle * Mathf.Deg2Rad);
					float y = dist * Mathf.Sin(angle * Mathf.Deg2Rad);
					Vector3 newPosition = state.currentTargetPoint.transform.position;
					newPosition.x += x;
					newPosition.z += y;
					float distance = Vector3.Distance(newPosition,state.brain.transform.position);
					if (distance<60 && distance> 5){
						destRes=state.brain.Navigator.SetDestination(newPosition, global::BaseNavigator.NavigationSpeed.Normal, 0f, 0f);}
					else{
						destRes=state.brain.Navigator.SetDestination(newPosition, global::BaseNavigator.NavigationSpeed.Fast, 0f, 0f);}	
				}
				return global::StateStatus.Running;
			}
			
			
			bool? OnPathEnter(BaseAIBrain<HumanNPC>.BaseFollowPathState state){
					if(state.path == null){
						return false;}
					if(state.path.Points == null){
						return false;}
					bool destRes = false;
					state.currentNodeIndex=(((state.path.Points.Count()*6)+state.currentNodeIndex + (UnityEngine.Random.Range(0,3)  * (state.pathDirection == AIMovePointPath.PathDirection.Forwards? 1 : -1)))%state.path.Points.Count());
					state.currentTargetPoint=state.path.GetPointAtIndex(state.currentNodeIndex);
					
					float dist = UnityEngine.Random.Range(2f,5f);
					float angle = UnityEngine.Random.Range(1f,Mathf.Pow(2f,dist))*(360f/Mathf.Pow(2f,dist));
					
					float x = dist * Mathf.Cos(angle * Mathf.Deg2Rad);
					float y = dist * Mathf.Sin(angle * Mathf.Deg2Rad);
					Vector3 newPosition = state.currentTargetPoint.transform.position;
					newPosition.x += x;
					newPosition.z += y;
					float distance = Vector3.Distance(newPosition,state.brain.transform.position);
					if (distance<60 && distance> 5){
						return destRes=state.brain.Navigator.SetDestination(newPosition, global::BaseNavigator.NavigationSpeed.Normal, 0f, 0f);}
					else{
						return destRes=state.brain.Navigator.SetDestination(newPosition, global::BaseNavigator.NavigationSpeed.Fast, 0f, 0f);}	
				
			}
			/* 
			bool? OnPathEnter(BaseAIBrain<HumanNPC>.BaseFollowPathState state){
				state.pathDirection = (UnityEngine.Random.Range(0.0f,1.0f)>0.5?AIMovePointPath.PathDirection.Forwards:AIMovePointPath.PathDirection.Backwards);
				state.status = StateStatus.Error;
				state.brain.Navigator.SetBrakingEnabled(true);
				state.path = state.brain.Navigator.Path;
				BaseEntity entity = state.GetEntity();
				
				if(entity is HumanNPC)((HumanNPC)entity).SetDucked(false);
				if (state.path == null)
				{
					AIInformationZone forPoint = AIInformationZone.GetForPoint(entity.ServerPosition, true);
					if (forPoint == null)
					{
						return false;
					}
					state.path = forPoint.GetNearestPath(entity.ServerPosition);
					if (state.path == null)
					{
						return false;
					}
				}
				state.currentNodeIndex = state.path.FindNearestPointIndex(entity.ServerPosition);
				state.currentTargetPoint = state.path.FindNearestPoint(entity.ServerPosition);
				if (state.currentTargetPoint == null)
				{
					return false;
				}
				for(int i =0; i< state.path.Points.Count() && state.currentTargetPoint.InUse();i++){
					state.currentNodeIndex = state.path.GetNextPointIndex(state.currentNodeIndex, ref state.pathDirection);
					state.currentTargetPoint = state.path.GetPointAtIndex(state.currentNodeIndex);					
				}
				state.currentTargetPoint.SetUsedBy((BaseEntity)state.brain.OwningPlayer,1f);
				state.status = StateStatus.Running;
				state.currentWaitTime = 0f;
				state.brain.Navigator.SetDestination(state.currentTargetPoint.transform.position, BaseNavigator.NavigationSpeed.Fast, 0f, 0f);
				return true;
			}
			object OnPathLeave(BaseAIBrain<HumanNPC>.BaseFollowPathState state){
				state.currentTargetPoint.ClearUsed();
				return null;
			}
			//*/
				
			object OnNpcTarget(BaseEntity hn, BaseEntity be){
				try{
					bool result = ((BaseCombatEntity)hn).faction!=((BaseCombatEntity)be).faction;//
					return (result==true?(bool?)null:(bool?)false);
				}catch(Exception e){return null;}
			}
			bool? OnIsFriendly(HumanNPC hn, BaseEntity be){
					return null;
			}
			bool? OnIsTarget(HumanNPC hn, BaseEntity be){
				try{
					bool result = ((BaseCombatEntity)hn).faction!=((BaseCombatEntity)be).faction;//
					return (result==true?(bool?)true:(bool?)false);
				}catch(Exception e){return null;}
			}
			bool? OnIsThreat(HumanNPC hn, BaseEntity be){
				try{
					bool result = ((BaseCombatEntity)hn).faction!=((BaseCombatEntity)be).faction;//
					return (result==true?(bool?)null:(bool?)false);
				}catch(Exception e){return null;}
			}
			bool? OnCaresAbout(AIBrainSenses hn, BaseEntity be){
				try{
					bool result = ((BaseCombatEntity)hn.owner).faction!=((BaseCombatEntity)be).faction;//
					return (result==true?(bool?)null:(bool?)false);
				}catch(Exception e){return null;}
			}
			/*
			Assign points by faction
			Walk towards closest point  
			if in range of point, next point. If stuck, next list
			Follow point chain indefinitely
			if all lists exhausted, fall into random roam
			*/
			#endregion
		#endregion
		private Vector3 repulsePoint(Vector3 t1, Vector3 t2){
			float factor=750f;//This is a guess, viva desmos
			float Distance = Vector3.Distance(t1,t2);
			return t1-((t2-t1)/(Distance/factor));
		}
		
		private void OnServerInitialized()
        {
			LoadConfig();
		}
		
		private void initAIZ(){
			/*
				String key = "";
				
			*/
			Dictionary<string,List<Vector3>>.KeyCollection keys = config.pointGroups.Keys;  
			foreach (string key in keys)  
			{  
				GameObject aiz = new GameObject(key+" [AIZ]");	
				aiz.transform.position = config.pointGroups[key][0];
				if(ActiveAIZ.ContainsKey(key)){
					ActiveAIZ[key] = aiz.AddComponent<AIInformationZone>();
				}else{
					ActiveAIZ.Add(key, aiz.AddComponent<AIInformationZone>());
				}
				ActiveAIZ[key].bounds =new Bounds(aiz.transform.position,new Vector3(100,20,100));
				aiz.AddComponent<AIInformationGrid>();
				GameObject aizmppgo  = new GameObject();
				aizmppgo.transform.position = config.pointGroups[key][0];				
				AIMovePointPath AIZMPP = aizmppgo.AddComponent<AIMovePointPath>();	
				aizmppgo.transform.parent = ActiveAIZ[key].transform;
				AIZMPP.LoopMode = AIMovePointPath.Mode.Loop;
				foreach(Vector3 v3 in config.pointGroups[key]){
					GameObject go  = new GameObject();
					go.transform.position = v3;
					go.AddComponent<AICoverPoint>();
					AIMovePoint aip = go.AddComponent<AIMovePoint>();
					aip.radius = 5.0f;
					aip.WaitTime = 10f;
					AIZMPP.AddPoint(aip);
					go.transform.parent = ActiveAIZ[key].transform;
				}				
				ActiveAIZ[key].Start();
				ActiveAIZ[key].MarkDirty(true);
				Puts("AIZ "+key+" Loaded");
			}  
		}
		
		private void OnItemUse(Item i, int n)
        {
			if(i.ToString().Contains("cactus")){
				if(!config.pointGroups.ContainsKey("Demo")){
					config.pointGroups.Add("Demo", (new List<Vector3>()));
				}
				config.pointGroups["Demo"].Add(i.parent.playerOwner.transform.position);
				SaveConfig();
			}
		}
		
		
			
		//assets/rust.ai/agents/npcplayer/humannpc/scientist/scientistnpc_roam.prefab
		// GameManager.server.CreateEntity("assets/rust.ai/agents/npcplayer/humannpc/scientist/scientistnpc_roam.prefab", info.spawnInfo.position, info.spawnInfo.rotation);
		/*
			void AttackedAIEvent(AttackedAIEvent aievent, BasePlayer bp, AIMemory memory){	
				//Puts(shooter.faction.ToString() + " : " + victim.faction.ToString());	
					if(aievent.combatEntity.name.Contains("scientist"))Puts(aievent.combatEntity.name + ":" + aievent.Owner.name);
				var result = FactionController.validTarget(aievent.combatEntity,aievent.combatEntity.lastAttacker);
				if((bool)result == true) {
					BaseAnimalNPC  basePlayer = (aievent.combatEntity.lastAttacker as global::BaseAnimalNPC );
					if (basePlayer != null )
					{
						if (aievent.ShouldSetOutputEntityMemory && basePlayer != memory.Entity.Get(5) && basePlayer.lastDealtDamageTo == aievent.Owner)
						{
							memory.Entity.Set(aievent.combatEntity.lastAttacker, aievent.OutputEntityMemorySlot);
						}
						return;
					}
					return;
				}
				//Puts("Same Team");
				return;
			}
		*/
			[ConsoleSystem.Factory("hz")]
			public class hz:ConsoleSystem{
				[ServerVar]
				public static int testint=0;
				
			}
		public class FactionController : MonoBehaviour{
			public enum FactionType{
				None,
				Scientist,
				Bandit,
				Both
			}
			
			public FactionType faction;
			public static Dictionary<ulong, Dictionary<FactionType,float>> factionScores = 
				new Dictionary<ulong, Dictionary<FactionType,float>>();
			public static Dictionary<string,List<FactionController>> squads = new Dictionary<string,List<FactionController>>();			
			public List<Vector3> ActivePointGroup = new List<Vector3>();
			public string squad = "Demo";
			public int PointIndex;
			public HumanNPC self;
			
			public static bool changeScore(BasePlayer bp, FactionType ft, float score){
				try{
					if(bp==null)return false;
					if(ft==null)return false;
					if(bp.GetComponent<HumanNPC>() != null) return false;
					FactionController fc = bp.GetComponent<FactionController>();
					if(fc==null)fc=bp.gameObject.AddComponent<FactionController>();
					ulong id= bp.userID;
					if(factionScores==null) return false;
					Dictionary<FactionType,float> selfFactions;
						factionScores.TryGetValue(id,out selfFactions);
					if(selfFactions==null) factionScores.Add(id, new Dictionary<FactionType,float>());
					float oldScore;//
					if(!(selfFactions.TryGetValue(ft,out oldScore))){
						oldScore=0.0f;
						selfFactions.Add(ft,oldScore);
					}
					oldScore+=score;
					factionScores[id][ft]=oldScore;
					if(factionScores[id][ft]>1)factionScores[id][ft]=1;
					if(factionScores[id][ft]<-1)factionScores[id][ft]=-1;
					float maxScore =-2f;
					List<FactionType> activeFactions = new List<FactionType>();		
					foreach(KeyValuePair<FactionType,float> f in factionScores[id]){
						if(f.Value>0 && f.Key!=FactionType.None){
							maxScore=f.Value;
							activeFactions.Add(f.Key);
						}
					}
					switch(activeFactions.Count()){
						case 0 :
							fc.faction=FactionType.None;
							break;
						case 1 :
							fc.faction=activeFactions[0];
							break;
						default :
							fc.faction=FactionType.Both;
							break;
					}
					return true;
				}catch(Exception e){return false;}
			}
			public static bool? validTarget(BaseEntity self, BaseEntity target){
			
				try{
				return ((
				((BaseCombatEntity)self).faction!=((BaseCombatEntity)target).faction)
				/*&&
				!(
					(((BaseCombatEntity)target).faction==BaseCombatEntity.Faction.Default)
				)*/);
				}catch(Exception e){
					return false;
				}
			}
		}
	}
}	//*/